
HEX

3F200034 CONSTANT GPLEV0
3F200008 CONSTANT GPSEL2
3E8FA000 CONSTANT FRAME_BUFFER
00000400 CONSTANT WIDTH
00000300 CONSTANT HEIGHT
FFFFFFFF CONSTANT WHITE
00000000 CONSTANT BLACK
0000FF00 CONSTANT GREEN

\ GPIO 22
16 CONSTANT BUTTON_RIGHT
\ GPIO 23
17 CONSTANT BUTTON_DOWN
\ GPIO 24
18 CONSTANT BUTTON_UP
\ GPIO 27
1B CONSTANT BUTTON_LEFT
\ GPIO 25
19 CONSTANT BUTTON_ON

VARIABLE START_POINT
\ dato il numero della porta GPIO restiuiamo la maschera corretta
\ ( button_gpio -- gpio_mask)
: GPIO_MASK 1 SWAP LSHIFT ;


\ ( microseconds -- )
: DELAY BEGIN 1 - DUP 0 = UNTIL DROP ;

\ ( x1 x2 -- x2 x1 x2)
: INVERSE_ROT SWAP 2DUP DROP ;

\ (color -- ) : mette il colore nel frame buffer e lo sposta
: ITER_RIGHT START_POINT @ INVERSE_ROT ! 4 + START_POINT ! ;
: ITER_LEFT START_POINT @ INVERSE_ROT ! 4 - START_POINT ! ;
: ITER_DOWN START_POINT @ INVERSE_ROT ! 4 WIDTH * + START_POINT ! ;
: ITER_UP START_POINT @ INVERSE_ROT ! 4 WIDTH * - START_POINT ! ;

\ ( color button_GPIO -- ) : quando il bottone Ã¨ premuto scrive il pixel a cui punta il frame buffer e lo incrementa
: WRITE_RIGHT BUTTON_RIGHT SWAP BEGIN 2DUP ITER_RIGHT  1000 DELAY GPIO_MASK GPLEV0 @ AND 0 = UNTIL 2DROP ;

: WRITE_LEFT BUTTON_LEFT SWAP BEGIN 2DUP ITER_LEFT 1000 DELAY GPIO_MASK GPLEV0 @ AND 0 = UNTIL  2DROP ;
: WRITE_DOWN BUTTON_DOWN SWAP BEGIN 2DUP ITER_DOWN 1000 DELAY GPIO_MASK GPLEV0 @ AND 0 = UNTIL  2DROP ;
: WRITE_UP BUTTON_UP SWAP BEGIN 2DUP ITER_UP 1000 DELAY GPIO_MASK GPLEV0 @ AND 0 = UNTIL  2DROP ;

: ITER DUP 2DUP WRITE_RIGHT WRITE_LEFT WRITE_UP WRITE_DOWN ;

: ON FRAME_BUFFER START_POINT ! BEGIN GREEN ITER BUTTON_ON GPIO_MASK GPLEV0 @ AND 0 = UNTIL ;


